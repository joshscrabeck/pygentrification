# -*- coding: utf-8 -*-
"""
Created on Mon Apr  3 18:28:49 2023

@author: tul54884
"""

# import pandas as pd
import folium as f
# import geopandas as gpd
import webbrowser
# import random

#%% 
#dummy data for testing

# result_df = gpd.read_file('C:/Users/tul54884/Documents/gus_8066_scratch/dummydata.geojson')

# result_df['gent_status'] = random.choices(['Nongentrifiable', 'No gentrification', 'Weak Gentrification', 'Moderate Gentrification', 'Intense Gentrification'],
#                                           k = 408)
# result_df['crit'] = random.choices([0,1,1.5,2,2.5,3,3.5,4], k=408)

# result_df['gentrifying'] = random.choices([True, False], k = 408)

#%%

def ding_result_map(result_df, filename = 'ding_map.html'):
    ''' This function takes in the GeoDataFrame generated by the calc_ding function and outputs and map object of a Folium map. It saves an html file of the map object to the working directorand opens it in a web browser.
    
    Parameters
    -------------
    result_df: GeoDataFrame from ding function
    file_name: name for output html file. Default name is ding_map.html 

    Returns
    ------------
    Map object and html file
    
    References
    -------------
    https://python-visualization.github.io/folium/
    
    Notes
    -----------    
      '''
    
# style functions to color the two layers
    def gent_status_color(feature):
        if feature['properties']['gent_status']== 'Nongentrifiable':
            return '#938f8f'
        elif feature['properties']['gent_status']== 'No gentrification':
            return 'white'
        elif feature['properties']['gent_status']== 'Weak Gentrification':
            return '#ffffbf'
        elif feature['properties']['gent_status']== 'Moderate Gentrification':
            return '#fdae61'
        elif feature['properties']['gent_status']== 'Intense Gentrification':
            return '#d7191c'
        
    def gentrifying_color(feature):
        if feature ['properties']['gentrifying']== True :
            return '#fdae61'
        else:
            return 'white'
        
    
    
#creating a map object along with a basemap to add to it
    m = f.Map(
        location= [
            sum(result_df.geometry.total_bounds[[1, 3]]) / 2,
            sum(result_df.geometry.total_bounds[[0, 2]]) / 2 
        ],
        tiles= '',
        zoom_start= 11
        )
    
    base_map = f.FeatureGroup(name='basemap',
                              overlay = False,
                              control = False)
    f.TileLayer(tiles = 'cartodbpositron').add_to(base_map)
    base_map.add_to(m)
    
# using feature groups for more control over layer control and display, adding the two data layers dependent on
# derived columns from the ding calculations, gent_status and gentrifying

    layer_fg = f.FeatureGroup(name='gentrifying', show = True, overlay= False)
    
    layer_fg.add_child(f.GeoJson(
        result_df,
        tooltip = f.GeoJsonTooltip(fields= ['crit']),
        style_function = lambda feature: {'color': 'gray',
                                          'fillColor': gentrifying_color(feature),
                                          'fillOpacity':0.5,
                                          'weight':.3},
        name = 'gentrifying'
        ))
            
    layer2_fg = f.FeatureGroup(name='gentrification status', show= True, overlay= False)
    
    layer2_fg.add_child(f.GeoJson(
        result_df,
        tooltip = f.GeoJsonTooltip(fields= ['gent_status']),
        style_function = lambda feature: {'color': 'gray',
                                          'fillColor':gent_status_color(feature),
                                          'fillOpacity':0.4,
                                          'weight':.3},
        name = 'Gentrification Status(detailed)'
        ))
    
# adding the layers and a layer control to the map object and returning it as the output of the function

    layer_fg.add_to(m)
    layer2_fg.add_to(m)
    f.LayerControl().add_to(m)
    
    m.save(filename)
    
    webbrowser.open(filename)
    
    return m

#%%
def bates_freeman_result_map(result_df, filename = 'bates_freeman_map.html'):
    ''' This function takes in the GeoDataFrame generated by the calc_batesfreeman function fand outputs and map object of a Folium map. It saves an html file of the map object to the working directorand opens it in a web browser.
    
    Parameters
    -------------
    result_df: GeoDataFrame from calc_batesfreeman function
    file_name: name for output html file. Default name is ding_map.html 

    Returns
    ------------
    Map object and html file
    
    References
    -------------
    https://python-visualization.github.io/folium/
    
    Notes
    -----------    
      '''
    
    def dem_change_index_color(feature):
        if feature ['properties']['dem_change_index']== True :
            return 'orange'
        else:
            return 'white'
    
    def vuln_index_color(feature):
        if feature ['properties']['v_index'] == 0:
            return '#fee5d9'
        if feature ['properties']['v_index'] == 1:
            return '#fcae91'
        if feature ['properties']['v_index'] == 2:
            return '#fb6a4a'
        if feature ['properties']['v_index']== 3:
            return '#de2d26'
        if feature ['properties']['v_index']== 4:
            return '#a50f15'
        
    
    def housing_typology_index_color(feature):
        if feature['properties']['mhv_type']== 'no typology':
            return 'white'
        if feature['properties']['mhv_type']== 'adjacent':
            return '#fde0dd'
        if feature['properties']['mhv_type']== 'accelerating':
            return '#fa9fb5'
        if feature['properties']['mhv_type']== 'appreciated':
            return '#c51b8a'
        
    def freeman_index_color(feature):
        if feature['properties']['freeman']== 0:
            return 'white'
        if feature['properties']['freeman']== 1:
            return '#bdd7e7'
        if feature['properties']['freeman']== 2:
            return '#6baed6'
        if feature['properties']['freeman']== 3:
            return '#3182bd'
        if feature['properties']['freeman']== 4:
            return '#08519c'

    
    
    
    m = f.Map(
        location= [
            sum(result_df.geometry.total_bounds[[1, 3]]) / 2,
            sum(result_df.geometry.total_bounds[[0, 2]]) / 2 
        ],
        tiles= '',
        zoom_start= 11
        )
    
    base_map = f.FeatureGroup(name='basemap',
                              overlay = False,
                              control = False)
    f.TileLayer(tiles = 'cartodbpositron').add_to(base_map)
    base_map.add_to(m)
    
    
    dem_chg_layer_fg = f.FeatureGroup(name='Demographic Change Index', show = True, overlay= False)
    
    dem_chg_layer_fg.add_child(f.GeoJson(
        result_df,
        tooltip = f.GeoJsonTooltip(fields=['dem_change_index']),   #perhaps Winn wants a different popup value?
        style_function = lambda feature: {'color': 'gray',
                                          'fillColor': dem_change_index_color(feature),
                                          'fillOpacity':0.5,
                                          'weight':.3},
        name= 'Demographic Change Index'
        ))
    
    
    vuln_ind_layer_fg = f.FeatureGroup(name= 'Vulnerability Index', show= True, overlay= False)
    
    vuln_ind_layer_fg.add_child(f.GeoJson(
        result_df,
        tooltip= f.GeoJsonTooltip(fields= ['v_index']),
        style_function = lambda feature:{'color': 'gray',
                                         'fillColor': vuln_index_color(feature),
                                         'fillOpacity':0.5,
                                         'weight': .3},
        name = 'Vulnerability Index'
             ))
    
    
    
    house_typo_layer_fg = f.FeatureGroup(name = 'Housing Typology Index', show= True, overlay=False)
    
    house_typo_layer_fg.add_child(f.GeoJson(
        result_df,
        tooltip= f.GeoJsonTooltip(fields= ['mhv_type']),
        style_function= lambda feature: {'color': 'gray',
                                         'fillColor': housing_typology_index_color(feature),
                                         'fillOpacity':0.5,
                                         'weight':.3},
        name = 'Housing Typology Index'
            ))
    
    
    
    freeman_layer_fg = f.FeatureGroup(name= 'Freeman Index', show= True, overlay= False)
    
    freeman_layer_fg.add_child(f.GeoJson(
        result_df,
        tooltip=f.GeoJsonTooltip(fields= ['freeman']),
        style_function= lambda feature: {'color': 'gray',
                                         'fillColor': freeman_index_color(feature),
                                         'fillOpacity':0.5,
                                         'weight':.3},
        name= 'Freeman Index'
        ))
    
    freeman_layer_fg.add_to(m)
    house_typo_layer_fg.add_to(m)
    vuln_ind_layer_fg.add_to(m)
    dem_chg_layer_fg.add_to(m)
    f.LayerControl().add_to(m)
    
    m.save(filename)
    
    webbrowser.open(filename)
    
    return m

#%%
###TEST###

# ding_result_map(result_df).save('test.html')
# webbrowser.open("test.html")
